/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.12.2023 01:43:34

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3168;
#else
constexpr int kTensorArenaSize = 2144;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.051349770277738571, } };
const TfArray<1, int> quant0_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[10] = { -2407, -204, -1213, 914, -281, 1188, 258, -757, -499, 1721, };
const TfArray<1, int> tensor_dimension6 = { 1, { 10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0010402934858575463, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[10*208] = { 
  -11, -27, 0, -58, -53, -8, 11, -6, -4, -4, -9, 2, -4, -37, -28, -11, -19, -24, 1, -9, -41, 8, 5, 8, 0, -10, -10, 5, 0, -14, -19, -12, -16, -11, 2, 9, -26, 10, 12, 4, -4, -26, -13, 2, -4, -5, -17, -3, -6, -2, -6, 13, -12, 11, 10, 1, -3, -29, -7, 7, 1, -3, -9, -3, -8, 2, -8, 9, -18, 14, 11, 1, -2, -23, -2, 13, 1, -5, -5, -4, -12, 5, -23, 6, -11, 5, 6, -3, -3, -24, 3, 7, 0, -3, 0, -5, -7, 6, -32, 7, -12, 5, 7, -1, 4, -27, 6, 6, -4, -8, 2, 0, -4, 10, -30, 6, -11, 2, 1, -14, -3, -21, 4, 6, -2, -7, 1, -2, -6, 7, -20, 8, -13, 2, 1, -2, 0, -22, 5, 4, -1, -9, 3, 1, -2, 11, -10, 4, -1, 3, 1, -4, 2, -18, 5, 3, -3, -8, 1, -4, -4, 6, 0, 5, -9, 5, -1, -21, -4, -19, 5, 0, -1, -7, 0, -7, 2, 8, 5, 2, -6, -4, -2, -13, -13, -17, -1, -2, -3, -4, 5, -4, 0, 7, 11, 2, -7, -5, -4, -20, -15, -37, 21, -30, -13, -29, -13, -123, 
  1, -9, -7, -22, -37, -8, 5, -33, 5, -13, -8, -5, -5, -15, -13, 0, 1, -15, -2, -8, -23, 5, -12, -14, 6, -5, -12, -5, -6, -9, -17, 4, -10, -14, -1, -11, -2, 5, -5, -24, 8, -7, -4, -14, -4, -18, -20, 5, 4, -15, -4, -11, 7, 9, -5, -23, 8, -6, 2, -10, -4, -8, -12, 4, 1, -15, -3, -18, 8, 11, -3, -21, 9, -2, 6, -15, -7, -9, -10, 11, 0, -13, -9, -10, 6, 8, -5, -29, 9, -13, 10, -15, -14, -11, -10, 7, 4, -10, -7, -13, 7, 12, -8, -23, 9, -12, 10, -20, -14, -10, -8, 5, 6, -13, -8, -12, 9, 7, -10, -19, 11, -7, 13, -16, -17, -9, -2, 2, 3, -14, -9, -10, 9, 9, -8, -18, 7, -10, 12, -19, -23, -17, -3, 3, 4, -15, -13, -10, 8, 5, -10, -15, 8, -15, 11, -14, -27, -11, -6, 1, 5, -10, 1, -19, 1, 4, -10, -13, -1, -5, 12, -13, -33, -19, -3, -5, 4, -15, -5, -20, 0, 3, -18, -18, -8, -16, 8, -26, -25, -25, -9, -6, 0, -22, 4, -14, 2, -3, -6, -9, -30, -47, -25, -105, -21, -34, -20, 2, 
  -12, -52, 6, -58, -34, -4, 12, -15, -29, -7, -4, -8, -14, -50, 4, -8, -10, -20, 10, -31, -13, -23, -7, -10, -22, -1, -10, -7, -5, -32, 18, -11, 1, -6, 13, -29, -7, -26, -34, -12, -29, -1, -8, -8, -7, -9, 13, -15, 1, 4, 15, -15, -7, -39, -34, -7, -27, 3, 7, -9, -7, -3, 10, -17, 3, 6, 15, 1, -5, -31, -21, -13, -24, -3, 9, -5, -12, -2, 9, -17, 3, 7, 13, -1, -9, -20, -34, -17, -36, -3, 5, -6, -17, 4, 7, -13, 7, 6, 7, -1, -8, -18, -32, -13, -22, 2, 10, -4, -18, -4, 7, -15, 2, 10, 11, 8, -9, -15, -19, -15, -26, 1, 8, -4, -7, -6, 9, -17, 0, 9, -17, 6, -5, -11, -15, -8, -22, -3, 7, -4, -13, -10, 5, -12, 2, 11, 7, 1, -13, -12, -14, -6, -13, 2, 4, -7, -19, -15, 5, -18, 2, 8, 4, 3, -6, -12, -4, -7, -11, 1, 6, -9, -11, -19, 9, -16, 0, 8, 8, -2, -16, -6, -11, -8, -10, -2, 0, -6, -25, -11, 4, -25, -2, 6, 11, -7, -38, -6, -5, -49, -46, -7, 13, -29, -20, -26, -5, -107, 
  -7, 0, -8, -28, -14, -2, 1, -19, -2, -11, -9, -5, 1, -12, -40, -2, -11, 2, -3, -19, -6, -6, -23, -20, 4, -10, -7, -5, -3, -5, -23, 6, 12, 2, -12, -21, -15, -2, -26, -20, 6, -12, -5, -8, -2, -10, -6, 5, 13, 3, -11, -20, -7, -2, -24, -19, 7, -18, -10, -10, -10, -5, 1, 7, 11, 2, -5, -15, -10, -1, -20, -24, 11, -22, -10, -12, -20, -2, 1, 8, 7, 1, -11, -12, -11, -2, -27, -22, 9, -14, -7, -15, -20, -6, 2, 7, 14, 0, -6, -17, -13, 0, -21, -30, 9, -17, -5, -10, -20, -7, 5, 8, 11, 1, -19, -20, -10, -4, -21, -24, 10, -15, -7, -9, -30, -6, 3, 10, 11, -1, -8, -21, -11, -3, -21, -18, 2, -11, -10, -11, -25, -3, 2, 5, 14, -2, -8, -14, -7, -9, -22, -36, 8, -26, -6, -10, -22, -5, 1, 2, 12, -5, 2, -27, -7, -7, -20, -28, 5, -22, -4, -10, -24, -11, 0, -2, 9, -7, -7, -32, -25, -11, -22, -34, -8, -27, -12, -23, -29, -19, -2, -15, 0, -6, -1, -20, -35, -9, -11, -38, -47, -40, -12, -67, -15, -74, -6, -35, 
  1, 4, -4, -27, -19, -16, -11, -40, -17, -4, -3, 12, -2, -15, -7, 2, -10, 3, -8, -28, -27, -2, 2, -27, -12, -1, -14, 9, -7, -5, -4, 9, -18, 2, -7, -10, -21, 2, 11, -28, -6, -2, -12, 8, -5, -13, -6, 4, -29, 4, -12, -2, -22, 8, 10, -20, -6, 0, -12, 14, 7, -7, -9, 8, -32, 5, -12, -1, -20, 9, 12, -19, -9, 0, -16, 19, 8, -3, -7, 8, -31, 1, -11, -6, -25, 5, 12, -14, -9, -3, -21, 14, 11, -8, -9, 8, -39, 5, -2, -4, -23, 5, 16, -16, -7, 2, -25, 10, 7, -9, -7, 7, -41, -3, 3, -2, -18, 0, 9, -21, -12, -6, -26, 5, 12, -8, -13, 5, -36, 0, -2, -6, -22, 3, 8, -18, -9, -1, -17, 9, 10, -10, -14, 7, -44, 0, 1, -1, -26, 1, 8, -24, -7, -5, -26, 3, 10, -8, -20, 0, -32, -5, 2, -9, -23, 4, 2, -32, -5, -8, -24, 0, 9, -6, -16, -3, -22, -9, 3, -3, -15, 0, 4, -17, -12, -4, -13, -12, 11, -14, -19, -5, -21, -16, -13, -13, -39, -1, 1, -28, -14, -15, -24, -43, 7, -37, -15, -42, 
  1, -22, -11, -14, 16, -13, -25, 3, -19, -5, -4, -7, -16, -18, 2, -16, -10, -18, -13, -5, 4, -12, -7, 8, -23, -7, -11, -4, -16, -31, 6, -17, -4, -11, -12, -5, 2, -21, -4, 9, -28, -14, -5, -3, -17, -30, 11, -20, -8, -16, -15, -29, -1, -24, 5, 7, -20, -4, -9, -7, -4, -28, 7, -22, -6, -15, -24, -28, 2, -23, 0, 7, -16, -6, -21, -1, 6, -21, 5, -15, -7, -12, -19, -25, 3, -20, 0, 5, -17, 0, -25, -10, 10, -21, 4, -24, -4, -14, -22, -28, 6, -21, 1, 7, -19, -4, -23, -6, 11, -26, 7, -16, -6, -11, -20, -23, 1, -23, 0, 5, -13, -2, -24, -13, 13, -18, 6, -30, -5, -11, -26, -17, 0, -27, -3, 2, -17, -4, -20, -13, 16, -24, 0, -18, -7, -11, -32, -30, -2, -18, 0, -3, -13, -5, -20, -6, 13, -34, 3, -15, -18, -25, -18, -20, -1, -16, 2, -1, -19, -4, -18, -12, 11, -29, 1, -15, -9, -22, -20, -23, -4, -15, -2, -3, -20, -8, -16, -27, 14, -44, -3, -22, -5, -23, -16, -27, -21, -10, -11, -32, -29, -28, -31, -36, 2, -47, -8, -21, 
  -12, -17, -11, -10, 17, -11, -11, 4, -13, -1, -9, -7, 0, -14, 5, -21, -8, -7, -7, 2, 10, -13, -18, 7, -21, -7, -6, -5, 3, -20, 11, -34, -11, -14, -4, -15, 5, -24, -17, 7, -32, -6, 3, -9, 1, -4, 15, -22, -16, -11, -6, 3, -1, -10, -24, 9, -22, -4, 10, -5, -12, 8, 6, -24, -17, -16, -7, 5, 4, -11, -24, 7, -28, -4, 15, -6, -10, 3, 7, -18, -13, -11, -7, 6, 7, -2, -14, 4, -30, -10, 13, -7, -19, 1, 6, -27, -14, -7, -8, 2, 6, -2, -19, 6, -23, 1, 15, -14, -20, 5, 6, -13, -8, -12, -11, 3, 5, 0, -19, 8, -31, -4, 15, -13, -29, 1, 7, -8, -16, -8, -13, 5, 4, 2, -15, 8, -25, -5, 11, -11, -27, 1, 4, -9, -10, -18, -11, 6, -2, 0, -14, 0, -23, -22, 9, -7, -24, -2, 5, -19, -3, -15, -12, 0, -3, 2, -21, -2, -22, -6, 10, -6, -24, 1, 5, -20, -9, -18, -10, -3, -12, 6, -19, -1, -28, -8, 4, -16, -18, -10, -3, -11, -9, -25, 5, -14, -25, -4, -11, -37, -43, -34, 0, -43, -28, -127, -32, -2, 
  -9, 9, -6, -18, -22, -8, -8, -14, -17, -10, -13, 8, 2, -33, -14, -18, -19, 11, -4, -24, -12, -6, -11, -16, -13, -6, -20, 13, 5, 8, -4, -14, -20, 15, -6, 8, -9, -3, -12, -14, -12, -24, -19, 10, 5, 19, -14, -10, -17, 11, -7, 11, -8, 3, -12, -16, -12, -10, -14, 14, 6, 15, -13, -12, -21, 10, 1, 15, -6, 2, -17, -22, 0, -3, -10, 12, -7, 14, -15, -13, -25, 8, 7, 11, -14, -2, -11, -15, -4, -5, -16, 10, 1, 17, -14, -13, -23, 9, 4, 13, -8, -1, -13, -16, -4, -1, -8, 7, 2, 16, -12, -13, -28, 8, 7, 11, -17, -6, -13, -13, -7, -1, -13, 8, 7, 9, -14, -16, -20, 5, 7, 14, -22, 3, -16, -21, -7, -2, -10, -1, 5, 12, -14, -14, -33, 6, 4, 11, -15, 1, -14, -12, -8, -1, -10, 4, 8, 11, -13, -16, -20, 6, 1, 10, -15, -2, -11, -3, -7, -2, -20, 0, 4, 7, -10, -15, -38, 0, -1, 6, -24, -6, -15, -6, -9, -3, -18, -2, 10, 9, -17, -10, -27, -11, -8, -4, -38, 0, -3, -38, -19, -6, -8, -12, 2, -3, -30, -83, 
  28, -21, 11, -8, -33, -24, -16, -10, 4, 8, -6, -59, -7, -17, -19, -16, 5, -19, 8, -13, -23, -20, -13, -23, 7, 10, -3, -61, 0, -34, -25, -15, -8, -10, 11, -12, -5, -13, -12, -12, 7, 17, -2, -54, 9, -31, -28, -16, 13, -8, 16, -24, 3, -16, 4, -15, 9, 17, -11, -21, 6, -18, -14, -10, 6, -6, 13, -25, 2, -14, 4, -14, 8, 14, -13, -24, 6, -24, -13, -7, 10, -11, 12, -25, 1, -20, 4, -15, 7, 10, -10, -21, 4, -27, -9, -7, 7, -9, 10, -23, 0, -8, 7, -13, 1, 11, -14, -27, 3, -26, -10, -4, 8, -4, 7, -27, 3, -14, 6, -13, 5, 8, -6, -29, 3, -31, -6, -11, 5, -11, 11, -20, 2, -16, 3, -11, 3, 9, -16, -26, -2, -15, -7, -14, 6, -11, -1, -19, -2, -14, 7, -18, 3, 10, -23, -25, -5, -17, -8, -11, -2, -7, -3, -26, 2, -11, 7, -8, 2, 6, -14, -18, -15, -33, -7, -14, 3, -15, -9, -17, 0, -9, 10, -10, -2, 1, -13, -25, -25, -39, -10, -14, -1, -38, -15, -25, -12, -12, -5, 6, -12, 19, -3, -24, -13, -31, -19, -10, 
  -8, -15, -13, -10, -7, -13, -9, 7, -4, -6, -14, -10, -1, -12, -16, -16, 4, -5, -10, -22, -10, -10, 4, 13, -3, -3, -12, -17, 1, -25, -16, -15, 6, -10, -11, -5, -10, -17, 9, 11, -1, -2, -10, -14, 1, -18, -8, -12, 8, -16, -14, -1, -6, -13, 6, 9, -1, -2, -12, -12, -8, -19, -10, -16, 6, -9, -9, -8, -7, -13, 13, 10, -2, -8, -14, -21, -10, -15, -7, -16, 4, -10, -3, -10, -7, -17, 7, 7, 3, -12, -15, -20, -11, -7, -8, -13, 7, -7, -9, -7, -5, -14, 8, 7, 0, -11, -15, -21, -7, -11, -9, -17, 6, -11, -11, -8, -12, -15, 5, 8, -3, -12, -11, -23, -3, -11, -7, -8, 0, -9, -4, -6, -9, -13, 4, 10, 1, -22, -14, -21, -7, -21, -12, -14, 5, -9, -16, -5, -8, -13, 10, 3, 1, -13, -13, -27, -8, -21, -12, -10, -1, -9, -9, -7, -13, -12, 6, -2, -7, -18, -11, -19, -8, -16, -14, -14, 0, -9, -17, -9, -9, -8, 2, -4, -6, -23, -17, -16, -4, -16, -16, -15, -6, -15, -15, -17, -21, -7, -4, -31, -33, -68, -5, -43, -7, -16, -12, 12, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 10,208 } };
const TfArray<1, float> quant7_scale = { 1, { 0.034612957388162613, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 129, -100, -635, 7, 10, -215, 266, -1255, -2122, -2354, 51, -449, 74, -427, -580, -1922, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0017511185724288225, 0.0007425153162330389, 0.0016244550934061408, 0.0015194895677268505, 0.0020424965769052505, 0.00018683898088056594, 0.0007313620881177485, 0.00059898942708969116, 0.00040843291208148003, 0.00065356609411537647, 0.0028345186728984118, 0.001271440414711833, 0.0024417394306510687, 0.0023938845843076706, 0.00027983702602796257, 0.00084968103328719735, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -2,-127,8,-3,0,3,6,-3, -18,-15,-2,-10,0,-9,-4,0, -99,-2,5,-95,-2,-35,-16,-3, 
  /* [1][0][][] */ -55,-1,13,-26,11,-37,12,-1, -19,-4,0,-45,-8,-21,-10,-6, 8,-1,-1,-127,1,-13,38,-8, 
  /* [2][0][][] */ -14,8,-127,-6,3,-24,-7,-1, -7,5,-49,-5,2,-22,-37,-12, -16,0,-27,14,-1,-15,-28,-17, 
  /* [3][0][][] */ 16,-98,-8,-2,4,-2,8,1, -6,-6,-11,-7,8,-22,-15,0, -10,1,-3,-19,0,-127,-38,1, 
  /* [4][0][][] */ 0,0,-3,-1,-46,3,0,-40, -6,-2,3,-8,-105,2,4,-127, -7,-57,5,-6,-25,4,0,-3, 
  /* [5][0][][] */ -27,-40,-29,4,23,-14,-47,104, 127,-100,-62,-19,-13,-18,-14,-54, -6,-64,-52,-12,-37,9,-28,-100, 
  /* [6][0][][] */ 20,-127,-1,1,1,22,9,-3, -4,-13,-3,-6,-18,-24,0,-29, -24,-8,-17,4,-96,-28,-31,-94, 
  /* [7][0][][] */ -127,5,-6,-20,-58,-6,-39,-35, -16,2,-6,-12,-27,-12,-29,-50, -1,4,3,0,-11,47,-18,-19, 
  /* [8][0][][] */ -13,14,-127,12,-1,-56,-28,-7, 28,3,-65,8,57,-4,10,-28, 12,-59,-32,4,-13,25,23,-40, 
  /* [9][0][][] */ -53,6,-68,30,8,-25,-127,-19, -85,-1,-15,-7,4,-15,-66,-16, -28,7,22,22,14,10,-2,1, 
  /* [10][0][][] */ -1,-127,1,-4,-2,-1,0,-2, -1,-46,-2,-5,-2,-2,3,-4, -2,-18,-3,-6,-1,-16,1,10, 
  /* [11][0][][] */ 4,4,-5,-2,-9,-37,-54,-1, -31,0,-5,-20,-1,-26,-13,2, -127,0,22,-29,-1,-11,12,4, 
  /* [12][0][][] */ 4,-2,-1,4,0,-3,-1,-6, -3,-2,-6,0,-1,-28,-2,-6, -2,-1,-127,3,-1,-75,-9,-8, 
  /* [13][0][][] */ 3,-127,-4,-2,-7,4,6,-22, -1,-112,-5,-2,-3,-1,-4,-5, 5,-95,-4,-2,15,-5,-14,5, 
  /* [14][0][][] */ -23,11,57,0,-2,-15,-127,-47, -3,0,-32,3,-3,3,-99,-73, -18,-17,77,-4,4,10,-37,-49, 
  /* [15][0][][] */ -106,8,-11,-16,-8,-127,-13,18, -14,5,2,-7,-10,-22,5,0, 2,0,-4,-4,37,-5,2,7, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.033640399575233459, 0.014264317229390144, 0.031207092106342316, 0.029190618544816971, 0.039238005876541138, 0.003589327447116375, 0.014050055295228958, 0.011507069692015648, 0.0078463256359100342, 0.012555531226098537, 0.054453387856483459, 0.024425394833087921, 0.046907782554626465, 0.045988451689481735, 0.0053758947178721428, 0.016323057934641838, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -5950, 423, -6840, -3863, -6047, -4367, -9792, -3216, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00055053667165338993, 0.00082057237159460783, 0.00030755298212170601, 0.0004397223237901926, 0.00030620297184213996, 0.00083762011490762234, 0.00035063445102423429, 0.00042231247061863542, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ 127,8,-31,5,-6,-4,1,13,29,19,-18,-15,-9, 65,8,-29,-5,22,-12,0,25,19,2,-22,-8,-11, 45,-2,-28,34,20,3,-8,10,8,-10,-11,-18,-10, 
  /* [1][0][][] */ -127,-63,2,9,0,8,-1,4,0,2,1,6,1, -2,-6,-9,0,14,7,3,8,-3,6,-1,1,0, 43,24,8,0,-4,-2,-1,-9,-8,-6,-1,-3,6, 
  /* [2][0][][] */ 14,58,37,-16,-60,-26,26,3,-22,-13,9,24,25, -24,46,45,-33,-38,-9,16,-3,-14,-18,-6,24,42, 127,97,52,-32,-67,7,37,-8,2,-2,3,36,29, 
  /* [3][0][][] */ 116,-33,18,4,-13,5,-10,11,18,9,-6,-14,0, 127,-54,29,-10,10,1,3,16,10,14,-10,4,10, 51,-118,38,-18,28,15,-2,9,16,4,3,-4,14, 
  /* [4][0][][] */ 91,-59,-5,27,-7,10,-66,-5,1,-5,43,9,15, 59,-9,50,62,-42,-72,-68,-30,-11,-3,21,25,10, 127,67,38,53,-81,-62,-29,-23,13,29,45,1,-13, 
  /* [5][0][][] */ -7,-19,-12,8,-16,15,9,-3,-7,14,-4,-9,-5, 42,-3,-11,-6,4,0,9,2,-2,4,-4,-4,-10, 127,37,-13,-13,-21,19,12,4,-11,-2,-10,-8,-9, 
  /* [6][0][][] */ 127,36,21,-21,32,2,-45,-39,-11,-10,26,33,-3, -5,64,15,-30,36,16,-34,-55,0,41,31,3,-2, 115,95,-51,-40,32,16,-27,-58,23,55,46,-12,1, 
  /* [7][0][][] */ -83,69,5,49,26,-3,-21,-18,-30,-11,27,-13,1, 95,-14,51,27,30,-16,-26,-13,-32,-12,-5,2,3, -8,127,34,56,14,-10,-30,-11,-20,-6,6,-17,-10, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.010721307247877121, 0.015980059280991554, 0.0059893741272389889, 0.0085632773116230965, 0.0059630838222801685, 0.016312051564455032, 0.0068283546715974808, 0.00822423305362463, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.051349770277738571, } };
const TfArray<1, int> quant12_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.052054036408662796, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.052054036408662796, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.052054036408662796, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.052054036408662796, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.030055031180381775, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.030055031180381775, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.030055031180381775, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.030055031180381775, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,10 } };
const TfArray<1, float> quant21_scale = { 1, { 0.14764222502708435, } };
const TfArray<1, int> quant21_zero = { 1, { 59 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,10 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2080, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
